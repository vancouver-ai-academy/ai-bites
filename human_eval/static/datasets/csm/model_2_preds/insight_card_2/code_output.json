{
    "code": {
<<<<<<< HEAD
        "code": "```python\nfrom agentpoirot.tools import func_tools\nimport pandas as pd\n\n# Load the dataset into a DataFrame\ndf = pd.read_csv('/mnt/home/projects/research-agent-poirot/web/static/datasets/csm/insights_from_questions_list/poirot/dataset.csv')\n\n# Stage 1: Data Manipulation\n# Create a new column to identify SLA breaches for high-priority cases\ndf['sla_breach'] = (df['made_sla'] == 0) & (df['priority'] == 'High')\n\n# Create a new column to count total high-priority cases\ndf['total_high_priority'] = df['priority'].apply(lambda x: 1 if x == 'High' else 0)\n\n# Stage 2: Plotting\n# Use the pie chart function to visualize the percentage of high-priority cases that breached their SLA\nfunc_tools.plot_pie_chart(df=df, plot_column='sla_breach', count_column='total_high_priority', plot_title='Percentage of High-Priority Cases Breaching SLA')\n```",
        "prompt": "\n\nGiven the following meta information:\n\n<description>The dataset captures customer service management cases, including details on case durations, assignments, escalations, and SLAs. Potential trends include case resolution efficiency, SLA compliance, and the impact of escalations, priority, and outages on service performance.</description>\n<goal>Optimize service efficiency and resolution times.</goal>\n<persona>CSM efficiency and performance evaluator.</persona>\n<dataset_name>Customer Support Management (CSM)</dataset_name>\n<indicator_list>[{'name': 'missing_inconsistent_data', 'description': 'Any missing values in critical fields like assigned_to, resolved_by, closed_at, or number should be flagged.', 'threshold': 'Rows with over 5% missing critical fields should be excluded or revisited.'}, {'name': 'case_duration_metrics', 'description': 'Any case where rpt_case_duration or rpt_case_resolve_duration is 3x greater than the average duration.', 'threshold': 'Investigate all cases with durations exceeding the average by a factor of 3 or more.'}, {'name': 'escalation_and_reassignment_patterns', 'description': 'More than 2 escalations or 3 reassignments.', 'threshold': 'Escalations or reassignments beyond these thresholds should be reviewed.'}, {'name': 'sla_met_or_breached', 'description': 'Any case where made_sla == False should be flagged.', 'threshold': 'Cross-check SLA breaches with high-priority cases or urgent cases.'}, {'name': 'impact_priority_mismatch', 'description': 'High impact cases with a low or medium priority.', 'threshold': 'Any mismatch between impact and priority should be investigated.'}, {'name': 'outage_duration_resolution_timing', 'description': 'If outage_duration is greater than 24 hours or if the gap between outage_start_time and resolved_at exceeds 12 hours for critical services.', 'threshold': 'Cases exceeding these thresholds should be reviewed.'}, {'name': 'resolution_timeliness_and_closed_cases', 'description': 'A gap of more than 48 hours between resolved_at and closed_at.', 'threshold': 'Any case that takes more than 48 hours to close after resolution should be flagged.'}, {'name': 'frequent_categories_subcategories', 'description': 'Categories or subcategories that account for more than 20% of the total cases.', 'threshold': 'High-frequency categories or subcategories should be reviewed.'}, {'name': 'language_location_analysis', 'description': 'Locations or languages that account for more than 15% of total cases but show a 50% higher case duration than average.', 'threshold': 'Any such location or language group should be reviewed.'}, {'name': 'escalation_triggers', 'description': 'Cases where escalated == True and escalation_count > 1 in less than 24 hours after being opened.', 'threshold': 'These cases may indicate that initial assignments are going to unqualified teams.'}]</indicator_list>\n\nGiven the schema:\n\n[\"Column: active (float64)\\n  missing_count: 0\\n  unique_count: 2\\n  min: 0.0\\n  max: 1.0\\n  mean: 0.49925\\n  std: 0.5000306903945168\\nColumn: description (object)\\n  missing_count: 0\\n  unique_count: 8000\\n  top5_unique_values: ['Type upon street poor.', 'Executive begin reflect huge.', 'Before brother build.', 'Attention teacher walk which investment tax order.', 'Today sea mind key.']\\nColumn: account (object)\\n  missing_count: 0\\n  unique_count: 15\\n  top5_unique_values: ['Riley and Sons', 'Harper, Williams and Palmer', 'Miller Inc', 'Watkins PLC', 'Bell-Walsh']\\nColumn: u_rpt_case_duration (float64)\\n  missing_count: 0\\n  unique_count: 100\\n  min: 1.0\\n  max: 100.0\\n  mean: 50.420625\\n  std: 28.995802181995195\\nColumn: u_rpt_case_resolve_duration (float64)\\n  missing_count: 0\\n  unique_count: 100\\n  min: 1.0\\n  max: 100.0\\n  mean: 50.79675\\n  std: 28.722387807817668\\nColumn: assignment_group (object)\\n  missing_count: 0\\n  unique_count: 10\\n  top5_unique_values: ['Astronomer', 'Physiotherapist', 'Location manager', 'Occupational hygienist', 'Engineer, building services']\\nColumn: assigned_on (object)\\n  missing_count: 0\\n  unique_count: 8000\\n  min: 2024-01-01 00:31:55.186761\\n  max: 2024-09-03 18:49:48.180408\\nColumn: assigned_to (object)\\n  missing_count: 0\\n  unique_count: 10\\n  top5_unique_values: ['Jessica Daniels DVM', 'Antonio Mcpherson', 'Catherine Mueller', 'Matthew Baldwin', 'Brian Baker']\\nColumn: u_case_category (object)\\n  missing_count: 0\\n  unique_count: 5\\n  top5_unique_values: ['I', 'picture', 'pull', 'community', 'building']\\nColumn: u_case_type (object)\\n  missing_count: 0\\n  unique_count: 5\\n  top5_unique_values: ['show', 'after', 'offer', 'fine', 'security']\\nColumn: category (object)\\n  missing_count: 0\\n  unique_count: 5\\n  top5_unique_values: ['parent', 'believe', 'find', 'statement', 'all']\\nColumn: u_category_changed (float64)\\n  missing_count: 0\\n  unique_count: 2\\n  min: 0.0\\n  max: 1.0\\n  mean: 0.505625\\n  std: 0.49999960932601306\\nColumn: u_category_predicted (float64)\\n  missing_count: 0\\n  unique_count: 2\\n  min: 0.0\\n  max: 1.0\\n  mean: 0.507\\n  std: 0.49998224746582015\\nColumn: closed_at (object)\\n  missing_count: 0\\n  unique_count: 8000\\n  min: 2024-01-01 00:26:04.871128\\n  max: 2024-09-03 19:33:17.193282\\nColumn: closed_by (object)\\n  missing_count: 0\\n  unique_count: 10\\n  top5_unique_values: ['Matthew Baldwin', 'Jessica Daniels DVM', 'Brandy Stanton', 'Nicole Farmer', 'Antonio Mcpherson']\\nColumn: sys_created_on (object)\\n  missing_count: 0\\n  unique_count: 8000\\n  min: 2024-01-01 00:04:15.039774\\n  max: 2024-09-03 18:04:44.424895\\nColumn: sys_created_by (object)\\n  missing_count: 0\\n  unique_count: 10\\n  top5_unique_values: ['Brian Baker', 'Amy Pacheco', 'Nicole Farmer', 'Todd Duncan', 'Antonio Mcpherson']\\nColumn: calendar_duration (float64)\\n  missing_count: 0\\n  unique_count: 500\\n  min: 1.0\\n  max: 500.0\\n  mean: 252.541125\\n  std: 142.16707422381083\\nColumn: escalation (float64)\\n  missing_count: 0\\n  unique_count: 2\\n  min: 0.0\\n  max: 1.0\\n  mean: 0.494375\\n  std: 0.49999960932601306\\nColumn: u_escalated (float64)\\n  missing_count: 0\\n  unique_count: 2\\n  min: 0.0\\n  max: 1.0\\n  mean: 0.506\\n  std: 0.49999524938360734\\nColumn: u_escalation_count (float64)\\n  missing_count: 0\\n  unique_count: 6\\n  min: 0.0\\n  max: 5.0\\n  mean: 2.492375\\n  std: 1.6983970173161969\\nColumn: estimated_cost (float64)\\n  missing_count: 0\\n  unique_count: 7686\\n  min: 1048.0\\n  max: 99987.0\\n  mean: 50407.9375\\n  std: 28512.53894160788\\nColumn: change (object)\\n  missing_count: 0\\n  unique_count: 971\\n  top5_unique_values: ['story', 'along', 'another', 'room', 'animal']\\nColumn: impact (object)\\n  missing_count: 0\\n  unique_count: 3\\n  top5_unique_values: ['Medium', 'Low', 'High']\\nColumn: u_outage_duration (float64)\\n  missing_count: 0\\n  unique_count: 101\\n  min: 0.0\\n  max: 100.0\\n  mean: 49.5475\\n  std: 29.209290329965185\\nColumn: u_outage_end_time (object)\\n  missing_count: 0\\n  unique_count: 8000\\n  min: 2024-01-01 00:04:48.518880\\n  max: 2024-09-03 17:15:23.348959\\nColumn: u_outage_start_time (object)\\n  missing_count: 0\\n  unique_count: 8000\\n  min: 2024-01-01 00:54:38.178069\\n  max: 2024-09-03 19:01:45.360881\\nColumn: task_count (float64)\\n  missing_count: 0\\n  unique_count: 10\\n  min: 1.0\\n  max: 10.0\\n  mean: 5.4755\\n  std: 2.887765944293032\\nColumn: u_language (object)\\n  missing_count: 0\\n  unique_count: 182\\n  top5_unique_values: ['Yiddish', 'Somali', 'Serbian', 'Ndonga', 'Tatar']\\nColumn: location (object)\\n  missing_count: 0\\n  unique_count: 10\\n  top5_unique_values: ['Walkerview', 'Lake Matthewville', 'Patrickfurt', 'Port Jean', 'New Glenn']\\nColumn: made_sla (float64)\\n  missing_count: 0\\n  unique_count: 2\\n  min: 0.0\\n  max: 1.0\\n  mean: 0.49975\\n  std: 0.5000311904260822\\nColumn: opened_at (object)\\n  missing_count: 0\\n  unique_count: 8000\\n  min: 2024-01-01 00:46:15.855159\\n  max: 2024-09-03 19:29:29.353375\\nColumn: opened_by (object)\\n  missing_count: 0\\n  unique_count: 10\\n  top5_unique_values: ['Brian Baker', 'Todd Duncan', 'Matthew Baldwin', 'Catherine Mueller', 'Eric Garcia']\\nColumn: u_outage_type (object)\\n  missing_count: 0\\n  unique_count: 971\\n  top5_unique_values: ['tonight', 'thus', 'develop', 'do', 'brother']\\nColumn: u_p1_assist (float64)\\n  missing_count: 0\\n  unique_count: 2\\n  min: 0.0\\n  max: 1.0\\n  mean: 0.496375\\n  std: 0.5000181113109353\\nColumn: u_potentially_caused_by_upgrade (float64)\\n  missing_count: 0\\n  unique_count: 2\\n  min: 0.0\\n  max: 1.0\\n  mean: 0.498625\\n  std: 0.5000293621832429\\nColumn: reassignment_count (float64)\\n  missing_count: 0\\n  unique_count: 6\\n  min: 0.0\\n  max: 5.0\\n  mean: 2.491375\\n  std: 1.699937302587684\\nColumn: incident (object)\\n  missing_count: 0\\n  unique_count: 971\\n  top5_unique_values: ['them', 'wait', 'red', 'skin', 'short']\\nColumn: resolved_at (object)\\n  missing_count: 0\\n  unique_count: 8000\\n  min: 2024-01-01 01:58:46.065016\\n  max: 2024-09-03 19:07:09.790709\\nColumn: resolved_by (object)\\n  missing_count: 0\\n  unique_count: 10\\n  top5_unique_values: ['Todd Duncan', 'Brandy Stanton', 'Amy Pacheco', 'Matthew Baldwin', 'Brian Baker']\\nColumn: subcategory (object)\\n  missing_count: 0\\n  unique_count: 5\\n  top5_unique_values: ['parent', 'find', 'statement', 'all', 'believe']\\nColumn: time_worked (float64)\\n  missing_count: 0\\n  unique_count: 500\\n  min: 1.0\\n  max: 500.0\\n  mean: 247.596875\\n  std: 145.09173155819457\\nColumn: urgency (float64)\\n  missing_count: 0\\n  unique_count: 3\\n  min: 1.0\\n  max: 3.0\\n  mean: 1.994625\\n  std: 0.8192557640174766\\nColumn: state (object)\\n  missing_count: 0\\n  unique_count: 3\\n  top5_unique_values: ['Open', 'Closed', 'In Progress']\\nColumn: priority (object)\\n  missing_count: 0\\n  unique_count: 3\\n  top5_unique_values: ['High', 'Low', 'Medium']\\nColumn: number (object)\\n  missing_count: 0\\n  unique_count: 8000\\n  top5_unique_values: ['b566f47f-2641-4380-8494-79ddf4005463', 'd77a3ae6-d6cf-4fbc-b04e-f0c72c78dd96', '747b822b-fc07-4524-b421-daae7506572d', 'f27f5aee-c636-4202-acb3-2ef0b3db0fe4', 'db78b72a-56da-42d3-a834-b8d8f02e30e3']\\n\\n\\nColumn 'active' examples\\n    0.0\\n    1.0\\n\\nColumn 'description' examples\\n    Type upon street poor.\\n    Plant among carry soon hard.\\n\\nColumn 'account' examples\\n    Miller Inc\\n    Johnson-Garcia\\n\\nColumn 'u_rpt_case_duration' examples\\n    54.0\\n    59.0\\n\\nColumn 'u_rpt_case_resolve_duration' examples\\n    41.0\\n    3.0\\n\\nColumn 'assignment_group' examples\\n    Copywriter, advertising\\n    Physiotherapist\\n\\nColumn 'assigned_on' examples\\n    2024-03-18 03:18:08.710755\\n    2024-03-16 01:34:19.330712\\n\\nColumn 'assigned_to' examples\\n    Nicole Farmer\\n\\nColumn 'u_case_category' examples\\n    I\\n    pull\\n\\nColumn 'u_case_type' examples\\n    after\\n    security\\n\\nColumn 'category' examples\\n    believe\\n    find\\n\\nColumn 'u_category_changed' examples\\n    0.0\\n    1.0\\n\\nColumn 'u_category_predicted' examples\\n    1.0\\n\\nColumn 'closed_at' examples\\n    2024-01-18 15:17:40.582069\\n    2024-07-14 11:34:49.779530\\n\\nColumn 'closed_by' examples\\n    Brandy Stanton\\n    Nicole Farmer\\n\\nColumn 'sys_created_on' examples\\n    2024-02-13 03:27:05.776151\\n    2024-01-15 05:41:55.382494\\n\\nColumn 'sys_created_by' examples\\n    Antonio Mcpherson\\n    Brian Baker\\n\\nColumn 'calendar_duration' examples\\n    208.0\\n    315.0\\n\\nColumn 'escalation' examples\\n    0.0\\n\\nColumn 'u_escalated' examples\\n    0.0\\n    1.0\\n\\nColumn 'u_escalation_count' examples\\n    4.0\\n    5.0\\n\\nColumn 'estimated_cost' examples\\n    69443.0\\n    35347.0\\n\\nColumn 'change' examples\\n    outside\\n    home\\n\\nColumn 'impact' examples\\n    High\\n    Low\\n\\nColumn 'u_outage_duration' examples\\n    83.0\\n    58.0\\n\\nColumn 'u_outage_end_time' examples\\n    2024-02-27 03:26:12.071276\\n    2024-03-27 11:33:12.091777\\n\\nColumn 'u_outage_start_time' examples\\n    2024-06-28 13:12:36.075270\\n    2024-01-21 08:41:38.196269\\n\\nColumn 'task_count' examples\\n    7.0\\n    1.0\\n\\nColumn 'u_language' examples\\n    Kannada\\n    Wolof\\n\\nColumn 'location' examples\\n    Lake Matthewville\\n    Lake Hollytown\\n\\nColumn 'made_sla' examples\\n    1.0\\n\\nColumn 'opened_at' examples\\n    2024-02-15 08:32:48.423968\\n    2024-03-28 00:00:16.345601\\n\\nColumn 'opened_by' examples\\n    Todd Duncan\\n    Amy Pacheco\\n\\nColumn 'u_outage_type' examples\\n    participant\\n    drop\\n\\nColumn 'u_p1_assist' examples\\n    1.0\\n\\nColumn 'u_potentially_caused_by_upgrade' examples\\n    0.0\\n    1.0\\n\\nColumn 'reassignment_count' examples\\n    2.0\\n    1.0\\n\\nColumn 'incident' examples\\n    PM\\n    build\\n\\nColumn 'resolved_at' examples\\n    2024-04-15 12:23:57.252301\\n    2024-02-21 10:29:18.558206\\n\\nColumn 'resolved_by' examples\\n    Amy Pacheco\\n    Matthew Baldwin\\n\\nColumn 'subcategory' examples\\n    all\\n    believe\\n\\nColumn 'time_worked' examples\\n    16.0\\n    351.0\\n\\nColumn 'urgency' examples\\n    3.0\\n    2.0\\n\\nColumn 'state' examples\\n    In Progress\\n    Open\\n\\nColumn 'priority' examples\\n    Medium\\n    Low\\n\\nColumn 'number' examples\\n    b566f47f-2641-4380-8494-79ddf4005463\\n    a4587863-567c-4e2a-adb4-1bf793eb8cbc\\n\\n\"]\n\nGiven the data path:\n\n/mnt/home/projects/research-agent-poirot/web/static/datasets/csm/insights_from_questions_list/poirot/dataset.csv\n\nGiven the list of predefined functions in agentpoirot.tools module and their example usage:\n\n\nplot_wordcloud(df: pandas.core.frame.DataFrame, group_by_column: str, plot_column: str) -> None:\nCreates word clouds for each group in `group_by_column` based on text in `plot_column`.\n\nThis plot is useful for answering questions like:\n- \"What are the most common words for each group?\"\n- \"How does word frequency vary across different categories?\"\n\nArgs:\n    df (pd.DataFrame): DataFrame containing the data.\n    group_by_column (str): Column name to group by (e.g., categories).\n    plot_column (str): Column name for text data (e.g., reviews, comments).\n====================\n\nplot_boxplot(df: pandas.core.frame.DataFrame, x_column: str, y_column: str, plot_title: str) -> None:\nGenerates a box plot using Seaborn to show the distribution of `y_column` values across different categories in `x_column`.\n\nThis plot is useful for answering questions like:\n- \"How does the distribution of values differ between categories?\"\n- \"Are there any outliers or variations in the data?\"\n\nArgs:\n    df (pd.DataFrame): DataFrame containing the data.\n    x_column (str): Column name for x-axis (categories).\n    y_column (str): Column name for y-axis (numerical values).\n    plot_title (str): Title of the plot.\n====================\n\nplot_pie_chart(df: pandas.core.frame.DataFrame, plot_column: str, count_column: str, plot_title: str) -> None:\nGenerates a pie chart using Matplotlib to show the proportion of each category.\n\nThis plot is useful for answering questions like:\n- \"What is the percentage distribution of categories?\"\n- \"How much of the total does each category represent?\"\n\nArgs:\n    df (pd.DataFrame): DataFrame containing the data.\n    plot_column (str): Column name for the categories (labels).\n    count_column (str): Column name for the values (numerical data).\n    plot_title (str): Title of the plot.\n====================\n\nplot_violin_plot(df: pandas.core.frame.DataFrame, x_column: str, y_column: str, plot_title: str) -> None:\nCreates a violin plot using Seaborn to visualize the distribution of `y_column` values across different categories in `x_column`.\n\nThis plot is useful for answering questions like:\n- \"How does the distribution of values within categories vary?\"\n- \"What are the density and spread of values within each category?\"\n\nArgs:\n    df (pd.DataFrame): DataFrame containing the data.\n    x_column (str): Column name for x-axis (categories).\n    y_column (str): Column name for y-axis (numerical values).\n    plot_title (str): Title of the plot.\n====================\n\nplot_histogram(df: pandas.core.frame.DataFrame, column: str, plot_title: str) -> None:\nGenerates a histogram to show the distribution of the specified column using Seaborn.\n\nThis plot is useful for answering questions like:\n- \"What is the distribution of values in this dataset?\"\n- \"Are there any patterns or outliers in the data distribution?\"\n\nArgs:\n    df (pd.DataFrame): DataFrame containing the data.\n    column (str): Column name for histogram data.\n    plot_title (str): Title of the plot.\n====================\n\n\nGive me the python code required to answer this question \"What percentage of high-priority cases breached their SLA?\" and put a comment on top of each variable.\n\n\n\n* Make a single code block for starting with ```python\n* Do not produce code blocks for languages other than Python.\n* Do \"from agentpoirot.tools import func_tools\" at the beginning of the code. \n* Make sure to import all needed libraries\n* Then you must load the dataframe as df using the pd.read_csv function.\n* There are two main steps you need to do, highlight them with \"# Stage Name\" in the code.\n    - Data Manipulation: \n        * You can add additional columns to the df to get what you need for the plot.\n        * You can aggregate or group data to create summary statistics or new data structures.\n        * You can subset the data to get only the columns you need.\n        * You must not create any additional variables that is not needed for the plot and is not part of the df\n        * Each line here should start with 'df ...'\n        * never filter the number of rows in the df\n        * Use the conditions given by the question to create a new column that satisfies those conditions\n        * if you use the count_column, it has to be numeric, and it should be a column in the df and you can create one if needed\n\n    - Plotting: \n        * You must use exactly only one of the predefined plot functions mentioned above as 'func_tools.' to make and save the plot and its stats. It should be exactly one line of code\n        * Make sure you use the plotting function signature well  with keyword matching and the correct order of arguments \n        * look at the column types from the schema (like object, int, and so on) and make sure you are using the appropriate column types for the plotting function arguments\n        * make sure you use every required argument for the plotting function\n        * the function should look like 'func_tools.plot_*(df=df, plot_column=plot_column, ....)'\n\n* End your code with ```.\n* Avoid these common errors\n    - AttributeError: 'DataFrame' object has no attribute 'tolist'\n\nOutput code:\n\n"
=======
        "code": "```python\nfrom agentpoirot.tools import func_tools\nimport pandas as pd\n\n# Load the dataset\ndf = pd.read_csv('/mnt/home/research-agent-poirot/web/static/datasets/csm/insights_from_questions_list/poirot/dataset.csv')\n\n# Data Manipulation\n# Create a new column to identify SLA breaches for high-priority cases\ndf['sla_breach'] = (df['made_sla'] == 0) & (df['priority'] == 'High')\n\n# Calculate the percentage of high-priority cases that breached their SLA\ndf['high_priority_count'] = df['priority'].apply(lambda x: 1 if x == 'High' else 0)\ndf['sla_breach_percentage'] = df['sla_breach'].sum() / df['high_priority_count'].sum() * 100\n\n# Plotting\n# Use a pie chart to visualize the percentage of SLA breaches among high-priority cases\nfunc_tools.plot_pie_chart(df=df, plot_column='sla_breach', count_column='high_priority_count', plot_title='Percentage of High-Priority Cases Breaching SLA')\n```",
        "prompt": "\n\nGiven the following meta information:\n\n<description>The dataset captures customer service management cases, including details on case durations, assignments, escalations, and SLAs. Potential trends include case resolution efficiency, SLA compliance, and the impact of escalations, priority, and outages on service performance.</description>\n<goal>Optimize service efficiency and resolution times.</goal>\n<persona>CSM efficiency and performance evaluator.</persona>\n<dataset_name>Customer Support Management (CSM)</dataset_name>\n<indicator_list>[{'name': 'missing_inconsistent_data', 'description': 'Any missing values in critical fields like assigned_to, resolved_by, closed_at, or number should be flagged.', 'threshold': 'Rows with over 5% missing critical fields should be excluded or revisited.'}, {'name': 'case_duration_metrics', 'description': 'Any case where rpt_case_duration or rpt_case_resolve_duration is 3x greater than the average duration.', 'threshold': 'Investigate all cases with durations exceeding the average by a factor of 3 or more.'}, {'name': 'escalation_and_reassignment_patterns', 'description': 'More than 2 escalations or 3 reassignments.', 'threshold': 'Escalations or reassignments beyond these thresholds should be reviewed.'}, {'name': 'sla_met_or_breached', 'description': 'Any case where made_sla == False should be flagged.', 'threshold': 'Cross-check SLA breaches with high-priority cases or urgent cases.'}, {'name': 'impact_priority_mismatch', 'description': 'High impact cases with a low or medium priority.', 'threshold': 'Any mismatch between impact and priority should be investigated.'}, {'name': 'outage_duration_resolution_timing', 'description': 'If outage_duration is greater than 24 hours or if the gap between outage_start_time and resolved_at exceeds 12 hours for critical services.', 'threshold': 'Cases exceeding these thresholds should be reviewed.'}, {'name': 'resolution_timeliness_and_closed_cases', 'description': 'A gap of more than 48 hours between resolved_at and closed_at.', 'threshold': 'Any case that takes more than 48 hours to close after resolution should be flagged.'}, {'name': 'frequent_categories_subcategories', 'description': 'Categories or subcategories that account for more than 20% of the total cases.', 'threshold': 'High-frequency categories or subcategories should be reviewed.'}, {'name': 'language_location_analysis', 'description': 'Locations or languages that account for more than 15% of total cases but show a 50% higher case duration than average.', 'threshold': 'Any such location or language group should be reviewed.'}, {'name': 'escalation_triggers', 'description': 'Cases where escalated == True and escalation_count > 1 in less than 24 hours after being opened.', 'threshold': 'These cases may indicate that initial assignments are going to unqualified teams.'}]</indicator_list>\n\nGiven the schema:\n\n[\"Column: active (float64)\\n  missing_count: 0\\n  unique_count: 2\\n  min: 0.0\\n  max: 1.0\\n  mean: 0.49925\\n  std: 0.5000306903945168\\nColumn: description (object)\\n  missing_count: 0\\n  unique_count: 8000\\n  top5_unique_values: ['She project simply man recently specific.', 'Tend phone country know service.', 'Among attention agent brother past.', 'Way least approach property.', 'Might single several fact view protect occur quite.']\\nColumn: account (object)\\n  missing_count: 0\\n  unique_count: 15\\n  top5_unique_values: ['Riley and Sons', 'Harper, Williams and Palmer', 'Miller Inc', 'Watkins PLC', 'Bell-Walsh']\\nColumn: u_rpt_case_duration (float64)\\n  missing_count: 0\\n  unique_count: 100\\n  min: 1.0\\n  max: 100.0\\n  mean: 50.420625\\n  std: 28.995802181995195\\nColumn: u_rpt_case_resolve_duration (float64)\\n  missing_count: 0\\n  unique_count: 100\\n  min: 1.0\\n  max: 100.0\\n  mean: 50.79675\\n  std: 28.722387807817668\\nColumn: assignment_group (object)\\n  missing_count: 0\\n  unique_count: 10\\n  top5_unique_values: ['Astronomer', 'Physiotherapist', 'Occupational hygienist', 'Location manager', 'Engineer, building services']\\nColumn: assigned_on (object)\\n  missing_count: 0\\n  unique_count: 8000\\n  min: 2024-01-01 00:31:55.186761\\n  max: 2024-09-03 18:49:48.180408\\nColumn: assigned_to (object)\\n  missing_count: 0\\n  unique_count: 10\\n  top5_unique_values: ['Jessica Daniels DVM', 'Antonio Mcpherson', 'Catherine Mueller', 'Matthew Baldwin', 'Brian Baker']\\nColumn: u_case_category (object)\\n  missing_count: 0\\n  unique_count: 5\\n  top5_unique_values: ['I', 'picture', 'pull', 'community', 'building']\\nColumn: u_case_type (object)\\n  missing_count: 0\\n  unique_count: 5\\n  top5_unique_values: ['show', 'after', 'offer', 'fine', 'security']\\nColumn: category (object)\\n  missing_count: 0\\n  unique_count: 5\\n  top5_unique_values: ['parent', 'believe', 'find', 'statement', 'all']\\nColumn: u_category_changed (float64)\\n  missing_count: 0\\n  unique_count: 2\\n  min: 0.0\\n  max: 1.0\\n  mean: 0.505625\\n  std: 0.49999960932601306\\nColumn: u_category_predicted (float64)\\n  missing_count: 0\\n  unique_count: 2\\n  min: 0.0\\n  max: 1.0\\n  mean: 0.507\\n  std: 0.49998224746582015\\nColumn: closed_at (object)\\n  missing_count: 0\\n  unique_count: 8000\\n  min: 2024-01-01 00:26:04.871128\\n  max: 2024-09-03 19:33:17.193282\\nColumn: closed_by (object)\\n  missing_count: 0\\n  unique_count: 10\\n  top5_unique_values: ['Matthew Baldwin', 'Jessica Daniels DVM', 'Brandy Stanton', 'Nicole Farmer', 'Antonio Mcpherson']\\nColumn: sys_created_on (object)\\n  missing_count: 0\\n  unique_count: 8000\\n  min: 2024-01-01 00:04:15.039774\\n  max: 2024-09-03 18:04:44.424895\\nColumn: sys_created_by (object)\\n  missing_count: 0\\n  unique_count: 10\\n  top5_unique_values: ['Brian Baker', 'Amy Pacheco', 'Todd Duncan', 'Nicole Farmer', 'Antonio Mcpherson']\\nColumn: calendar_duration (float64)\\n  missing_count: 0\\n  unique_count: 500\\n  min: 1.0\\n  max: 500.0\\n  mean: 252.541125\\n  std: 142.16707422381083\\nColumn: escalation (float64)\\n  missing_count: 0\\n  unique_count: 2\\n  min: 0.0\\n  max: 1.0\\n  mean: 0.494375\\n  std: 0.49999960932601306\\nColumn: u_escalated (float64)\\n  missing_count: 0\\n  unique_count: 2\\n  min: 0.0\\n  max: 1.0\\n  mean: 0.506\\n  std: 0.49999524938360734\\nColumn: u_escalation_count (float64)\\n  missing_count: 0\\n  unique_count: 6\\n  min: 0.0\\n  max: 5.0\\n  mean: 2.492375\\n  std: 1.6983970173161969\\nColumn: estimated_cost (float64)\\n  missing_count: 0\\n  unique_count: 7686\\n  min: 1048.0\\n  max: 99987.0\\n  mean: 50407.9375\\n  std: 28512.53894160788\\nColumn: change (object)\\n  missing_count: 0\\n  unique_count: 971\\n  top5_unique_values: ['story', 'along', 'another', 'room', 'animal']\\nColumn: impact (object)\\n  missing_count: 0\\n  unique_count: 3\\n  top5_unique_values: ['Medium', 'Low', 'High']\\nColumn: u_outage_duration (float64)\\n  missing_count: 0\\n  unique_count: 101\\n  min: 0.0\\n  max: 100.0\\n  mean: 49.5475\\n  std: 29.209290329965185\\nColumn: u_outage_end_time (object)\\n  missing_count: 0\\n  unique_count: 8000\\n  min: 2024-01-01 00:04:48.518880\\n  max: 2024-09-03 17:15:23.348959\\nColumn: u_outage_start_time (object)\\n  missing_count: 0\\n  unique_count: 8000\\n  min: 2024-01-01 00:54:38.178069\\n  max: 2024-09-03 19:01:45.360881\\nColumn: task_count (float64)\\n  missing_count: 0\\n  unique_count: 10\\n  min: 1.0\\n  max: 10.0\\n  mean: 5.4755\\n  std: 2.887765944293032\\nColumn: u_language (object)\\n  missing_count: 0\\n  unique_count: 182\\n  top5_unique_values: ['Yiddish', 'Somali', 'Serbian', 'Ndonga', 'Tatar']\\nColumn: location (object)\\n  missing_count: 0\\n  unique_count: 10\\n  top5_unique_values: ['Walkerview', 'Lake Matthewville', 'Patrickfurt', 'Port Jean', 'New Glenn']\\nColumn: made_sla (float64)\\n  missing_count: 0\\n  unique_count: 2\\n  min: 0.0\\n  max: 1.0\\n  mean: 0.49975\\n  std: 0.5000311904260822\\nColumn: opened_at (object)\\n  missing_count: 0\\n  unique_count: 8000\\n  min: 2024-01-01 00:46:15.855159\\n  max: 2024-09-03 19:29:29.353375\\nColumn: opened_by (object)\\n  missing_count: 0\\n  unique_count: 10\\n  top5_unique_values: ['Brian Baker', 'Todd Duncan', 'Matthew Baldwin', 'Catherine Mueller', 'Eric Garcia']\\nColumn: u_outage_type (object)\\n  missing_count: 0\\n  unique_count: 971\\n  top5_unique_values: ['tonight', 'thus', 'develop', 'do', 'brother']\\nColumn: u_p1_assist (float64)\\n  missing_count: 0\\n  unique_count: 2\\n  min: 0.0\\n  max: 1.0\\n  mean: 0.496375\\n  std: 0.5000181113109353\\nColumn: u_potentially_caused_by_upgrade (float64)\\n  missing_count: 0\\n  unique_count: 2\\n  min: 0.0\\n  max: 1.0\\n  mean: 0.498625\\n  std: 0.5000293621832429\\nColumn: reassignment_count (float64)\\n  missing_count: 0\\n  unique_count: 6\\n  min: 0.0\\n  max: 5.0\\n  mean: 2.491375\\n  std: 1.699937302587684\\nColumn: incident (object)\\n  missing_count: 0\\n  unique_count: 971\\n  top5_unique_values: ['them', 'wait', 'red', 'friend', 'skin']\\nColumn: resolved_at (object)\\n  missing_count: 0\\n  unique_count: 8000\\n  min: 2024-01-01 01:58:46.065016\\n  max: 2024-09-03 19:07:09.790709\\nColumn: resolved_by (object)\\n  missing_count: 0\\n  unique_count: 10\\n  top5_unique_values: ['Todd Duncan', 'Brandy Stanton', 'Amy Pacheco', 'Matthew Baldwin', 'Brian Baker']\\nColumn: subcategory (object)\\n  missing_count: 0\\n  unique_count: 5\\n  top5_unique_values: ['parent', 'find', 'statement', 'all', 'believe']\\nColumn: time_worked (float64)\\n  missing_count: 0\\n  unique_count: 500\\n  min: 1.0\\n  max: 500.0\\n  mean: 247.596875\\n  std: 145.09173155819457\\nColumn: urgency (float64)\\n  missing_count: 0\\n  unique_count: 3\\n  min: 1.0\\n  max: 3.0\\n  mean: 1.994625\\n  std: 0.8192557640174766\\nColumn: state (object)\\n  missing_count: 0\\n  unique_count: 3\\n  top5_unique_values: ['Open', 'Closed', 'In Progress']\\nColumn: priority (object)\\n  missing_count: 0\\n  unique_count: 3\\n  top5_unique_values: ['High', 'Low', 'Medium']\\nColumn: number (object)\\n  missing_count: 0\\n  unique_count: 8000\\n  top5_unique_values: ['9e8e611a-ca87-458c-8e5e-18b7a34a66c0', '0de8c530-904b-4a91-82fe-b1e34ad9b000', '6531b70b-983e-4659-8ac6-f13cd935ae3d', 'a91b548e-f130-40a7-9c0e-3d10eca5151e', '22f7d7cf-61f8-4a31-bb97-c9c875fd50d9']\\n\\n\\nColumn 'active' examples\\n    0.0\\n    1.0\\n\\nColumn 'description' examples\\n    Type upon street poor.\\n    Plant among carry soon hard.\\n\\nColumn 'account' examples\\n    Miller Inc\\n    Johnson-Garcia\\n\\nColumn 'u_rpt_case_duration' examples\\n    54.0\\n    59.0\\n\\nColumn 'u_rpt_case_resolve_duration' examples\\n    41.0\\n    3.0\\n\\nColumn 'assignment_group' examples\\n    Copywriter, advertising\\n    Physiotherapist\\n\\nColumn 'assigned_on' examples\\n    2024-03-18 03:18:08.710755\\n    2024-03-16 01:34:19.330712\\n\\nColumn 'assigned_to' examples\\n    Nicole Farmer\\n\\nColumn 'u_case_category' examples\\n    I\\n    pull\\n\\nColumn 'u_case_type' examples\\n    after\\n    security\\n\\nColumn 'category' examples\\n    believe\\n    find\\n\\nColumn 'u_category_changed' examples\\n    0.0\\n    1.0\\n\\nColumn 'u_category_predicted' examples\\n    1.0\\n\\nColumn 'closed_at' examples\\n    2024-01-18 15:17:40.582069\\n    2024-07-14 11:34:49.779530\\n\\nColumn 'closed_by' examples\\n    Brandy Stanton\\n    Nicole Farmer\\n\\nColumn 'sys_created_on' examples\\n    2024-02-13 03:27:05.776151\\n    2024-01-15 05:41:55.382494\\n\\nColumn 'sys_created_by' examples\\n    Antonio Mcpherson\\n    Brian Baker\\n\\nColumn 'calendar_duration' examples\\n    208.0\\n    315.0\\n\\nColumn 'escalation' examples\\n    0.0\\n\\nColumn 'u_escalated' examples\\n    0.0\\n    1.0\\n\\nColumn 'u_escalation_count' examples\\n    4.0\\n    5.0\\n\\nColumn 'estimated_cost' examples\\n    69443.0\\n    35347.0\\n\\nColumn 'change' examples\\n    outside\\n    home\\n\\nColumn 'impact' examples\\n    High\\n    Low\\n\\nColumn 'u_outage_duration' examples\\n    83.0\\n    58.0\\n\\nColumn 'u_outage_end_time' examples\\n    2024-02-27 03:26:12.071276\\n    2024-03-27 11:33:12.091777\\n\\nColumn 'u_outage_start_time' examples\\n    2024-06-28 13:12:36.075270\\n    2024-01-21 08:41:38.196269\\n\\nColumn 'task_count' examples\\n    7.0\\n    1.0\\n\\nColumn 'u_language' examples\\n    Kannada\\n    Wolof\\n\\nColumn 'location' examples\\n    Lake Matthewville\\n    Lake Hollytown\\n\\nColumn 'made_sla' examples\\n    1.0\\n\\nColumn 'opened_at' examples\\n    2024-02-15 08:32:48.423968\\n    2024-03-28 00:00:16.345601\\n\\nColumn 'opened_by' examples\\n    Todd Duncan\\n    Amy Pacheco\\n\\nColumn 'u_outage_type' examples\\n    participant\\n    drop\\n\\nColumn 'u_p1_assist' examples\\n    1.0\\n\\nColumn 'u_potentially_caused_by_upgrade' examples\\n    0.0\\n    1.0\\n\\nColumn 'reassignment_count' examples\\n    2.0\\n    1.0\\n\\nColumn 'incident' examples\\n    PM\\n    build\\n\\nColumn 'resolved_at' examples\\n    2024-04-15 12:23:57.252301\\n    2024-02-21 10:29:18.558206\\n\\nColumn 'resolved_by' examples\\n    Amy Pacheco\\n    Matthew Baldwin\\n\\nColumn 'subcategory' examples\\n    all\\n    believe\\n\\nColumn 'time_worked' examples\\n    16.0\\n    351.0\\n\\nColumn 'urgency' examples\\n    3.0\\n    2.0\\n\\nColumn 'state' examples\\n    In Progress\\n    Open\\n\\nColumn 'priority' examples\\n    Medium\\n    Low\\n\\nColumn 'number' examples\\n    b566f47f-2641-4380-8494-79ddf4005463\\n    a4587863-567c-4e2a-adb4-1bf793eb8cbc\\n\\n\"]\n\nGiven the data path:\n\n/mnt/home/research-agent-poirot/web/static/datasets/csm/insights_from_questions_list/poirot/dataset.csv\n\nGiven the list of predefined functions in agentpoirot.tools module and their example usage:\n\n\nplot_wordcloud(df: pandas.core.frame.DataFrame, group_by_column: str, plot_column: str) -> None:\nCreates word clouds for each group in `group_by_column` based on text in `plot_column`.\nArgs:\n    df (pd.DataFrame): DataFrame containing the data.\n    group_by_column (str): Column name to group by.\n    plot_column (str): Column name for text data.\n====================\n\nplot_violin_plot(df: pandas.core.frame.DataFrame, x_column: str, y_column: str, plot_title: str) -> None:\nCreates a violin plot showing the distribution of `y_column` values across different categories in `x_column`.\nIncludes box plot and all points.\nArgs:\n    df (pd.DataFrame): DataFrame containing the data.\n    x_column (str): Column name for x-axis (categories).\n    y_column (str): Column name for y-axis (values).\n    plot_title (str): Title of the plot.\n====================\n\nplot_radar_chart(df: pandas.core.frame.DataFrame, categories: List[str], values: List[str], plot_title: str) -> None:\nGenerates a radar chart to visualize multivariate data based on specified categories and values.\nArgs:\n    df (pd.DataFrame): DataFrame containing the data.\n    categories (List[str]): List of category names for radar chart.\n    values (List[str]): List of value names for radar chart.\n    plot_title (str): Title of the plot.\n====================\n\nplot_pie_chart(df: pandas.core.frame.DataFrame, plot_column: str, count_column: str, plot_title: str) -> None:\nGenerates a pie chart showing the proportions of `count_column` for each `plot_column` value.\nArgs:\n    df (pd.DataFrame): DataFrame containing the data.\n    plot_column (str): Column name for pie chart labels.\n    count_column (str): Column name for pie chart values.\n    plot_title (str): Title of the plot.\n====================\n\ndeepcopy(x, memo=None, _nil=[]):\nDeep copy operation on arbitrary Python objects.\n\nSee the module's __doc__ string for more info.\n====================\n\n\nGive me the python code required to answer this question \"What percentage of high-priority cases breached their SLA?\" and put a comment on top of each variable.\n\n\n\n* Make a single code block for starting with ```python\n* Do not produce code blocks for languages other than Python.\n* Do \"from agentpoirot.tools import func_tools\" at the beginning of the code. \n* Make sure to import all needed libraries\n* Then you must load the dataframe as df using the pd.read_csv function.\n* There are two main steps you need to do, highlight them with \"# Stage Name\" in the code.\n    - Data Manipulation: \n        * You can add additional columns to the df to get what you need for the plot.\n        * You can aggregate or group data to create summary statistics or new data structures.\n        * You can subset the data to get only the columns you need.\n        * You must not create any additional variables that is not needed for the plot and is not part of the df\n        * Each line here should start with 'df ...'\n        * never filter the number of rows in the df\n        * Use the conditions given by the question to create a new column that satisfies those conditions\n        * if you use the count_column, it has to be numeric, and it should be a column in the df and you can create one if needed\n\n    - Plotting: \n        * You must use exactly only one of the predefined plot functions mentioned above as 'func_tools.' to make and save the plot and its stats. It should be exactly one line of code\n        * Make sure you use the plotting function signature well  with keyword matching and the correct order of arguments \n        * look at the column types from the schema (like object, int, and so on) and make sure you are using the appropriate column types for the plotting function arguments\n        * make sure you use every required argument for the plotting function\n        * the function should look like 'func_tools.plot_*(df=df, plot_column=plot_column, ....)'\n\n* End your code with ```.\n* Avoid these common errors\n    - AttributeError: 'DataFrame' object has no attribute 'tolist'\n\nOutput code:\n\n"
>>>>>>> 2289d805431ec572755276c7c9765016c0e4b07d
    },
    "code_output": "",
    "message": "",
    "meta_dict": {
        "dataset_name": "Customer Support Management (CSM)",
        "description": "The dataset captures customer service management cases, including details on case durations, assignments, escalations, and SLAs. Potential trends include case resolution efficiency, SLA compliance, and the impact of escalations, priority, and outages on service performance.",
        "goal": "Optimize service efficiency and resolution times.",
        "indicator_list": [
            {
                "description": "Any missing values in critical fields like assigned_to, resolved_by, closed_at, or number should be flagged.",
                "name": "missing_inconsistent_data",
                "threshold": "Rows with over 5% missing critical fields should be excluded or revisited."
            },
            {
                "description": "Any case where rpt_case_duration or rpt_case_resolve_duration is 3x greater than the average duration.",
                "name": "case_duration_metrics",
                "threshold": "Investigate all cases with durations exceeding the average by a factor of 3 or more."
            },
            {
                "description": "More than 2 escalations or 3 reassignments.",
                "name": "escalation_and_reassignment_patterns",
                "threshold": "Escalations or reassignments beyond these thresholds should be reviewed."
            },
            {
                "description": "Any case where made_sla == False should be flagged.",
                "name": "sla_met_or_breached",
                "threshold": "Cross-check SLA breaches with high-priority cases or urgent cases."
            },
            {
                "description": "High impact cases with a low or medium priority.",
                "name": "impact_priority_mismatch",
                "threshold": "Any mismatch between impact and priority should be investigated."
            },
            {
                "description": "If outage_duration is greater than 24 hours or if the gap between outage_start_time and resolved_at exceeds 12 hours for critical services.",
                "name": "outage_duration_resolution_timing",
                "threshold": "Cases exceeding these thresholds should be reviewed."
            },
            {
                "description": "A gap of more than 48 hours between resolved_at and closed_at.",
                "name": "resolution_timeliness_and_closed_cases",
                "threshold": "Any case that takes more than 48 hours to close after resolution should be flagged."
            },
            {
                "description": "Categories or subcategories that account for more than 20% of the total cases.",
                "name": "frequent_categories_subcategories",
                "threshold": "High-frequency categories or subcategories should be reviewed."
            },
            {
                "description": "Locations or languages that account for more than 15% of total cases but show a 50% higher case duration than average.",
                "name": "language_location_analysis",
                "threshold": "Any such location or language group should be reviewed."
            },
            {
                "description": "Cases where escalated == True and escalation_count > 1 in less than 24 hours after being opened.",
                "name": "escalation_triggers",
                "threshold": "These cases may indicate that initial assignments are going to unqualified teams."
            }
        ],
        "persona": "CSM efficiency and performance evaluator."
    },
    "n_retries": 0,
    "output_folder": "web/static/datasets/csm/insights_from_questions_list/poirot/insight_card_2",
    "prompt": "input_variables=['database_path', 'function_docs', 'meta', 'question', 'schemas'] template='\\n\\nGiven the following meta information:\\n\\n{meta}\\n\\nGiven the schema:\\n\\n{schemas}\\n\\nGiven the data path:\\n\\n{database_path}\\n\\nGiven the list of predefined functions in agentpoirot.tools module and their example usage:\\n\\n\\n{function_docs}\\n\\nGive me the python code required to answer this question \"{question}\" and put a comment on top of each variable.\\n\\n\\n\\n* Make a single code block for starting with ```python\\n* Do not produce code blocks for languages other than Python.\\n* Do \"from agentpoirot.tools import func_tools\" at the beginning of the code. \\n* Make sure to import all needed libraries\\n* Then you must load the dataframe as df using the pd.read_csv function.\\n* There are two main steps you need to do, highlight them with \"# Stage Name\" in the code.\\n    - Data Manipulation: \\n        * You can add additional columns to the df to get what you need for the plot.\\n        * You can aggregate or group data to create summary statistics or new data structures.\\n        * You can subset the data to get only the columns you need.\\n        * You must not create any additional variables that is not needed for the plot and is not part of the df\\n        * Each line here should start with \\'df ...\\'\\n        * never filter the number of rows in the df\\n        * Use the conditions given by the question to create a new column that satisfies those conditions\\n        * if you use the count_column, it has to be numeric, and it should be a column in the df and you can create one if needed\\n\\n    - Plotting: \\n        * You must use exactly only one of the predefined plot functions mentioned above as \\'func_tools.\\' to make and save the plot and its stats. It should be exactly one line of code\\n        * Make sure you use the plotting function signature well  with keyword matching and the correct order of arguments \\n        * look at the column types from the schema (like object, int, and so on) and make sure you are using the appropriate column types for the plotting function arguments\\n        * make sure you use every required argument for the plotting function\\n        * the function should look like \\'func_tools.plot_*(df=df, plot_column=plot_column, ....)\\'\\n\\n* End your code with ```.\\n* Avoid these common errors\\n    - AttributeError: \\'DataFrame\\' object has no attribute \\'tolist\\'\\n\\nOutput code:\\n\\n'",
    "question": "What percentage of high-priority cases breached their SLA?",
    "vars": [
        {
            "plot": {
                "name": "web/static/datasets/csm/insights_from_questions_list/poirot/insight_card_2/plot.jpg",
                "type": "plot"
            },
            "stat": {
                "columns": [
                    {
                        "column_name": "sla_breach",
                        "column_stats": {
                            "max": 1.0,
                            "mean": 0.164,
                            "median": 0.0,
                            "min": 0.0,
                            "quantile_25": 0.0,
                            "quantile_50": 0.0,
                            "quantile_75": 0.0,
                            "std": 0.3702987174464932
                        },
                        "column_values": [
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "True",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "True",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "False",
                            "True",
                            "False",
                            "False",
                            "True"
                        ]
                    },
                    {
                        "column_name": "high_priority_count",
                        "column_stats": {
                            "max": 1.0,
                            "mean": 0.335375,
                            "median": 0.0,
                            "min": 0.0,
                            "quantile_25": 0.0,
                            "quantile_50": 0.0,
                            "quantile_75": 1.0,
                            "std": 0.4721509029795432
                        },
                        "column_values": [
                            "0",
                            "0",
                            "0",
                            "0",
                            "0",
                            "0",
                            "0",
                            "0",
                            "0",
                            "0",
                            "1",
                            "0",
                            "0",
                            "0",
                            "0",
                            "0",
                            "1",
                            "0",
                            "0",
                            "1",
                            "1",
                            "0",
                            "0",
                            "0",
                            "0",
                            "0",
                            "0",
                            "1",
                            "0",
                            "1",
                            "0",
                            "0",
                            "0",
                            "1",
                            "0",
                            "0",
                            "0",
                            "0",
                            "1",
                            "0",
                            "0",
                            "0",
                            "0",
                            "0",
                            "0",
                            "0",
                            "1",
                            "0",
                            "1",
                            "1"
                        ]
                    }
                ],
                "extra_stats": null
            }
        }
    ]
}